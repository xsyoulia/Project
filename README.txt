Анализ по написанному приложению для блога:

Цель:
	Основная цель проекта — создание блога с продвинутыми функциями для взаимодействия пользователей с контентом и друг с другом, что включает не только стандартные функции публикации и редактирования постов, но и возможности скрытия контента, управления видимостью постов, подписки на пользователей, а также реализации поиска по тегам. Важной частью проекта является обеспечение удобства и безопасности использования, включая аутентификацию пользователей и защиту личных данных.

Основные задачи:

1. Функция регистрации/входа пользователя; задача — обеспечить возможность для пользователей регистрировать учетные записи, безопасно входить в систему и выходить из нее. Для этого требуется:

		•Использование формы регистрации с валидацией данных.
		•Хранение паролей в зашифрованном виде (хэширование).
		•Реализация аутентификации на основе сессий для управления доступом к функционалу блога.
		•Вывод сообщений об ошибках при некорректных данных или неудачной аутентификации.

		//Хэширование пароля перед его сохранением
		$hashed_password = password_hash($password, PASSWORD_DEFAULT);
		$stmt = $pdo->prepare('INSERT INTO users (username, email, password) VALUES (:username, :email, :password)');
		$stmt->execute([
			'username' => $username,
			'email' => $email,
			'password' => $hashed_password
		]);

		// Проверка на уникальность пользователя и email
		$stmt = $pdo->prepare('SELECT * FROM users WHERE username = :username OR email = :email');
		$stmt->execute(['username' => $username, 'email' => $email]);
		$user = $stmt->fetch();

		if ($user) {
			if ($user['username'] === $username) {
				$errors[] = 'Такой пользователь уже существует';
			}
			if ($user['email'] === $email) {
				$errors[] = 'Этот email уже зарегистрирован';
			}
		}

2. Функция написания, редактирования и удаления поста; задача — дать возможность пользователям публиковать и управлять своими постами. Включает:

		•Форма для создания и редактирования постов.
		•Сохранение постов в базу данных.
		•Возможность редактирования и удаления постов только автором поста.
		•Проверка прав пользователя перед выполнением операций над постом.

		// Создание поста
		$stmt = $pdo->prepare('INSERT INTO posts (user_id, title, content, visibility, created_at) VALUES (:user_id, :title, :content, :visibility, NOW())');
		$result = $stmt->execute([
			'user_id' => $_SESSION['user_id'],
			'title' => $title,
			'content' => $content,
			'visibility' => $visibility
		]);

		// Редактирование поста
		$stmt = $pdo->prepare('SELECT * FROM posts WHERE id = :id AND user_id = :user_id');
		$stmt->execute(['id' => $post_id, 'user_id' => $_SESSION['user_id']]);
		$post = $stmt->fetch();
		if (!$post) {
			echo "Пост не найден или у вас нет прав на его редактирование.";
			exit();
		}

		// Удаление поста
		$stmt = $pdo->prepare('DELETE FROM posts WHERE id = :id AND user_id = :user_id');
		$stmt->execute(['id' => $post_id, 'user_id' => $_SESSION['user_id']]);

3.Функция подписки на пользователей; позволяет пользователям следить за контентом других пользователей. Задачи:

		•Создание системы подписок с возможностью отслеживания и отмены подписки.
		•Хранение информации о подписках в таблице базы данных.
		•Ограничение видимости приватных постов только для подписчиков.

		// Подписка
		$stmt = $pdo->prepare('INSERT INTO subscriptions (follower_id, following_id) VALUES (:follower_id, :following_id)');
		$stmt->execute([
			'follower_id' => $_SESSION['user_id'],
			'following_id' => $subscribed_to
		]);

		// Проверка подписки
		$stmt = $pdo->prepare('SELECT * FROM subscriptions WHERE follower_id = :follower_id AND following_id = :following_id');
		$stmt->execute([
			'follower_id' => $_SESSION['user_id'],
			'following_id' => $subscribed_to
		]);

4.Функция просмотра публичных постов и скрытых постов;
Публичные посты должны быть доступны всем пользователям, вне зависимости от подписок. Основная задача — предоставить пользователям возможность просматривать общедоступные записи, которые не были скрыты автором, а также дать
возможность пользователям делать свои посты скрытыми, чтобы они были видны только самому пользователю

		// Получаем посты пользователя: скрытые и видимые
		if ($is_own_profile) {
			$stmt = $pdo->prepare('SELECT * FROM posts WHERE user_id = :user_id');
		} else {
			$stmt = $pdo->prepare('SELECT * FROM posts WHERE user_id = :user_id AND is_hidden = 0');
		}
		$stmt->execute(['user_id' => $profile_user_id]);
		$posts = $stmt->fetchAll();

5.Функция тегов при написании поста и поиск по тегам;
Добавление тегов к постам позволяет легко организовывать и находить контент. Реализация должна предусматривать возможность добавления множества тегов к каждому посту, а также эффективный поиск постов по тегам.

		// Привязываем тег к посту
		$stmt = $pdo->prepare('INSERT INTO post_tags (post_id, tag_id) VALUES (:post_id, :tag_id)');
		$stmt->execute(['post_id' => $post_id, 'tag_id' => $tag_id]);

		// Получаем посты, связанные с этим тегом, исключая скрытые и приватные посты
		$stmt = $pdo->prepare('
   	 	SELECT posts.*, users.username
  	  FROM posts
   	 	JOIN post_tags ON posts.id = post_tags.post_id
  		JOIN users ON posts.user_id = users.id
    	LEFT JOIN subscriptions ON posts.user_id = subscriptions.following_id AND subscriptions.follower_id = :current_user_id
    	WHERE post_tags.tag_id = :tag_id
    	AND (posts.is_hidden = 0 AND (posts.visibility = 0 OR (posts.visibility = 1 AND subscriptions.follower_id IS NOT NULL)))
    	ORDER BY posts.created_at ' . $sort_order . '
    	LIMIT :limit OFFSET :offset
	');



6.Структура базы данных:

База данных блога состоит из нескольких связанных таблиц: users для хранения информации о пользователях, posts для постов, tags для тегов, а также связующей таблицы post_tags для связи постов с тегами (отношение многие ко многим). Таблицы subscriptions, comments позволяют реализовать подписки пользователей друг на друга, комментарии к постам.

Каждая таблица имеет ключевые связи: например, посты связаны с пользователями через внешние ключи, а подписки и комментарии ссылаются на соответствующие записи в других таблицах. Это обеспечивает целостность данных и поддержку всех ключевых функций блога, таких как подписки, фильтрация постов по тегам, управление приватностью постов и интерактивность через комментарии.

7. Файл config.php отвечает за конфигурацию подключения к базе данных с использованием PDO (PHP Data Objects); основные аспекты:

		•Параметры подключения: Определяет ключевые параметры для доступа к базе данных, такие как хост сервера (localhost), имя базы данных (blog), имя пользователя (root), и пароль (в данном случае пустой).

		•Установка подключения: Применяется объект PDO для создания соединения с базой данных с указанием кодировки utf8. В случае ошибки подключения, файл выводит сообщение с описанием ошибки и останавливает выполнение скрипта.

		•Обработка ошибок: Используется режим генерации исключений (PDO::ERRMODE_EXCEPTION), который позволяет обрабатывать ошибки подключения более гибко.

Это очень важный файл для централизованного управления подключением ко всей базе данных проекта.